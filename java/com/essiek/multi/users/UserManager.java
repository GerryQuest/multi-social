package com.essiek.multi.users;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.couchbase.lite.CouchbaseLiteException;
import com.couchbase.lite.Database;
import com.couchbase.lite.Document;
import com.couchbase.lite.Emitter;
import com.couchbase.lite.JavaContext;
import com.couchbase.lite.LiveQuery;
import com.couchbase.lite.Manager;
import com.couchbase.lite.Mapper;
import com.couchbase.lite.Query;
import com.couchbase.lite.QueryEnumerator;
import com.couchbase.lite.QueryRow;
import com.couchbase.lite.UnsavedRevision;
import com.couchbase.lite.View;
import com.couchbase.lite.LiveQuery.ChangeEvent;
import com.couchbase.lite.util.Log;
import com.essiek.multi.model.UserProfile;
import com.google.gson.Gson;

/**
 * @author Gerald
 * Manages the followed users, included add/delete/update data storage
 *
 */
public class UserManager {
	private Manager manager;
	private Database database;
	private Map<String, Object> user;
	private String dbName = "multisol-db";
	private View profileViews;
	
	/**
	 * 
	 */
	public UserManager() {
		/*super();*/
		create();
		initView();
		//initQuery();
	}
	


	public boolean create() {
		boolean success = false;
		 try {
			 manager = new Manager(new JavaContext("Data"), Manager.DEFAULT_OPTIONS);
			 manager.enableLogging("CBLite", Log.WARN);
			 database = manager.getDatabase(dbName);
			 success = true;
		 } catch (IOException | CouchbaseLiteException e) {
			 e.printStackTrace();
			 success = false;
		 }
		 return success;
	}
	
	// Extract usernames from list of feeds
	public List<String> extractMultiUsers(List<String> feeds) {
		List<String> extracted = new ArrayList<String>();
		for (String feed : feeds) {
			extracted.add(extractUserName(feed));
		}
		return extracted; 
	}
	// Add User Profile
	public String addUser(String name, String location, 
			Object socialMedia, List<String> tags, 
			List<String> handles, List<String> socialMediaUrl) {
		
		/*** MAYBE I SHOULD HAVE IT RETURN THE ID *******************/
		String id = null;
		/*boolean success = false;*/
		user = new HashMap<String, Object>();
		user.put("name", name);
		user.put("location", location);
		user.put("socialMedia", socialMedia);
		user.put("tags", tags);
		user.put("socialMediaHandle", handles);
		user.put("socialMediaURL", socialMediaUrl);
		
		
		try {
			database = manager.getDatabase("multisol-db");
			Document doc = database.createDocument();
			doc.putProperties(user);
			/*success = true;*/
			System.out.println("Added id " + doc.getId());
			id = doc.getId(); // id generated by database
			
			/*Document doc2 = database.getDocument(doc.getId());
			System.out.println(doc2.getProperties());*/
			
			
		} catch (CouchbaseLiteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			/*success = false;*/
		}
		return id;
	}

	public void initView() {
		profileViews = database.getView("profiles");
		profileViews.setMap(new Mapper() {

			@Override
			public void map(Map<String, Object> document, Emitter emitter) {
				// TODO Auto-generated method stub
				
				/*List<String> profiles = (List) document.get("profiles");
				for (String profile : profiles) {
					emitter.emit(profile, document.get("name"));
					emitter.emit(profile, document.get("socialMedia"));
				}*/
				//emitter.emit(document, document.get("name"));
				emitter.emit(document.get("name"), document.get("socialMedia"));
			}
			
		}, "8");
	}
	public String extractUserName(String feed) {
		String twitter = "twitter.com/";
		String instagram = "instagram.com/";
		String youtube = "youtube.com/user/";
		String username = null;
		
		if (feed.contains(twitter)) {
			username = feed.substring(feed.indexOf(twitter) + twitter.length());
			
			
		} else if (feed.contains(instagram)) {
			username = feed.substring(feed.indexOf(instagram) + instagram.length());
			
		} else if (feed.contains(youtube)) {
			username = feed.substring(feed.indexOf(youtube) + youtube.length() - 1);
			/*username.replaceAll("[\\/]*", "");*/
		} else {
			username = "";
		}
		//vine, dailymotion, tumblr etc
		username = username.replaceAll("[\\/]", "");
		//username.replaceAll("/", "");
		System.out.println("USERNAME " + username);
		return username;
	}
	
	public List<UserProfile> initQuery() {
		
		//Query query = database.getView("profiles").createQuery();
		Query query = database.createAllDocumentsQuery();
		query.setLimit(50);
		//Gson gson = new Gson();
		UserProfile profile;
		List<UserProfile> profiles = new ArrayList<UserProfile>();
		
		try {
			QueryEnumerator result = query.run();
			
			for (Iterator<QueryRow> it = result; it.hasNext(); ) {
				profile = new UserProfile();
			    QueryRow row = it.next();

			    
			    Document doc = row.getDocument();

			    profile.setName((String) doc.getProperty("name"));
			    
			    List<String> socialMedia2 = (ArrayList<String>) doc.getProperty("socialMedia");
			    if (socialMedia2.size() > 0)
			    	profile.setSocialMedia(socialMedia2);
			    
			    profile.setId((String) doc.getId());
			    System.out.println((String) doc.getId());
			    
			    /*Object l =  profile.getSocialMedia();*/
			   
			    @SuppressWarnings("unchecked")
				List<String> handles = (ArrayList<String>) doc.getProperty("socialMediaHandle");
			    if (handles.size() > 0)
			    	profile.setsocialMediaHandle(handles);
			    
			    @SuppressWarnings("unchecked")
				List<String> urls = (ArrayList<String>) doc.getProperty("socialMediaURL");
			    if (urls.size() > 0)
			    	profile.setSocialMediaURL(urls);
			    
			    
			    List<String> tags = (ArrayList<String>) doc.getProperty("tags");
			    if (tags.size() > 0)
			    	profile.setTags(tags);
			    
			    /*for (String media : socialMedia2) {
			    	if (!extractUserName(media).isEmpty()) {
			    		String user = extractUserName(media);
			    		profile.getSocialMediaHandle().add(user);
			    		profile.getSocialMediaURL().add(media);
			    	}
			    }*/
			    
			    System.out.println("SOCIAL " +profile.getSocialMediaHandle());
			    profiles.add(profile);

			}
			
		} catch (CouchbaseLiteException e) {
			e.printStackTrace();
		}
		return profiles;
	}
	
	
	
	public UserProfile getUserProfile(String id) {
		UserProfile profile = new UserProfile();;
		/*Query query = database.createAllDocumentsQuery();
		query.setLimit(50);*/
		System.out.println("getting user id: " + id);
		Document doc = null;
		try {
			database = manager.getDatabase(dbName);
			doc = (Document) database.getDocument(id);
			System.out.println("Name is : " + (String) doc.getProperty("name"));
			/*doc = (Document) database.getExistingDocument(id);*/
			
			/*System.out.println("DOCUMENT " + doc.);*/
			profile.setName((String) doc.getProperty("name"));
			profile.setSocialMedia((Object) doc.getProperty("socialMedia"));
			profile.setLocation((String) doc.getProperty("location"));
		} catch (CouchbaseLiteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		profile.setId(id);
		/* String[] social = profile.getSocialMedia().toString().replaceAll("\\[|\\]", "").split(",");
		    //String[] items = social.split(",");
		    List<String> list = Arrays.asList(social);
		    System.out.println("get soc " + list.get(0));
		    for (String media : list) {
		    	System.out.println(media + " " + extractUserName(media));
		    	if (!extractUserName(media).isEmpty()) {
		    		System.out.println("not empty");
		    		String user = extractUserName(media);
		    		System.out.println("extracted " + user);
		    		profile.getSocialMediaHandle().add(user);
		    	}
		    	
		    	
		    }*/
		    
		 /*List<String> socialMedia = (ArrayList<String>) profile.getSocialMedia();
		 for (String sMedia : socialMedia) {
			 if (!extractUserName(sMedia).isEmpty()) {
				 profile.getSocialMediaHandle().add(extractUserName(sMedia));
			 }
		 }*/
		
		@SuppressWarnings("unchecked")
		List<String> handles = (ArrayList<String>) doc.getProperty("socialMediaHandle");
		System.out.println("Size handles " + handles.size());
		if (!handles.isEmpty())
			profile.setsocialMediaHandle(handles);
		
		List<String> urls = (ArrayList<String>) doc.getProperty("socialMediaURL");
		System.out.println("Size urls " + urls.size());
		if (!urls.isEmpty())
			profile.setSocialMediaURL(urls);
			
	
		/*try {
			QueryEnumerator result = query.run();

			for (Iterator<QueryRow> it = result; it.hasNext();) {
				profile = new UserProfile();
				QueryRow row = it.next();
				Document doc = row.getDocument().g;
				profile.setName((String) doc.getProperty("name"));
				Object socialMedia = doc.getProperty("socialMedia");
				profile.setSocialMedia(socialMedia);
				profile.setId(id);
				
			}
		} catch (CouchbaseLiteException e) {
			e.printStackTrace();
		}*/
		return profile;
	}
	
	public boolean deleteFeed(String id, String feed) {
		boolean deleted = false;
		Document doc = (Document) database.getDocument(id);
		
		try {
			doc.update(new Document.DocumentUpdater() {
				
				@Override
				public boolean update(UnsavedRevision newRev) {
					// TODO Auto-generated method stub
					Map<String, Object> properties = newRev.getUserProperties();
					
					properties.put("name", newRev.getProperty("name"));
					properties.put("location", newRev.getProperty("location"));
					
					if ((String) newRev.getProperty("accordionID") != null)
						properties.put("accordionID", newRev.getProperty("accordionID"));
					
					if (newRev.getProperty("tags") != null)
						properties.put("tags", newRev.getProperty("tags"));
					
					
					//String[] socialMedia = newRev.getProperty("socialMedia").toString().replaceAll("[\\/]", "").split(",");
					/*String socialMedia = newRev.getProperty("socialMedia").toString();
					
					List<String> list = new ArrayList<String>();

					if (socialMedia != null) {
						
						socialMedia = (socialMedia.indexOf(", " + feed) > -1) ? socialMedia.replace(", " + feed, ""):socialMedia.replace(feed, "");
						System.out.println("Before Delete " + socialMedia);
						socialMedia = socialMedia.replaceAll("[\\/]", "");
						System.out.println("Delete AGAIN LIST " + socialMedia);
						String[] so = socialMedia.split(",");
						properties.put("socialMedia", so); *//**** CHANGE TO SO ****//*
						System.out.println("ARRAY SOCIAL " + Arrays.toString(so));
					}*/
					
					// When you delete the feed, you also have to delete the handle and url data
					List<String> socialMedia = (ArrayList<String>) newRev.getProperty("socialMedia");
					List<String> handle = (ArrayList<String>) newRev.getProperty("socialMediaHandle");
					System.out.println("Size " + socialMedia.size());
					if (socialMedia.size() > 0) {
						for (int i = 0; i < socialMedia.size(); i++) {
							if (socialMedia.get(i).equals(feed)) {
								System.out.println(socialMedia.get(i));
								socialMedia.remove(i);
								handle.remove(i);// Need to also remove handles
								break;
							}
						}
						properties.put("socialMedia", socialMedia);
						
					}
					properties.put("socialMediaHandle", handle);
					// Update socialMediaurl with socialMedia
					properties.put("socialMediaURL", socialMedia);
					newRev.setUserProperties(properties);
					
					return true;
				}
			});
			
			deleted = true;
		} catch (CouchbaseLiteException e) {
			e.printStackTrace();
		}
		
		return deleted;
	}
	
	public boolean updateProfile(String id, String feed) {
		boolean updated = false;
		Document doc = (Document) database.getDocument(id);
		//System.out.println("DOC NAME " + (String) doc.getProperty("name"));
		try {
			doc.update(new Document.DocumentUpdater() {
				
				@Override
				public boolean update(UnsavedRevision newRev) {
					// TODO Auto-generated method stub
					Map<String, Object> properties = newRev.getUserProperties();
					
					System.out.println("new Rev NAME " + doc.getProperty("name")
							+ " " + newRev.getProperty("location") + " " +
							newRev.getProperty("socialMedia") + " " + newRev.getProperty("tags"));
					
					properties.put("name", newRev.getProperty("name"));
					properties.put("location", newRev.getProperty("location"));
					
					if ((String) newRev.getProperty("accordionID") != null)
						properties.put("accordionID", newRev.getProperty("accordionID"));
					
					if (newRev.getProperty("tags") != null)
						properties.put("tags", newRev.getProperty("tags"));
					
					
					
					List<String> socialMedia = (ArrayList<String>) newRev.getProperty("socialMedia");
					if (socialMedia.size() >= 0) {
						socialMedia.add(feed);
						properties.put("socialMedia", socialMedia);
						
						/*List<String> handles = new ArrayList<String>(); 
						handles.add(extractUserName(feed));
								
						properties.put("socialMediaHandle", handles);
						properties.put("socialMediaURL", feed);*/
					}
					
					@SuppressWarnings("unchecked")
					List<String> mediaHandle = (ArrayList<String>) newRev.getProperty("socialMediaHandle");
					if (mediaHandle != null) {
						mediaHandle.add(extractUserName(feed));
					} else {
						mediaHandle = new ArrayList<String>();
						mediaHandle.add(extractUserName(feed));
					}
					properties.put("socialMediaHandle", mediaHandle);
					
					@SuppressWarnings("unchecked")
					List<String> mediaURL = (ArrayList<String>) newRev.getProperty("socialMediaURL");
					if (!mediaURL.isEmpty() && mediaURL != null) {
						mediaURL.add(feed);
					} else {
						mediaURL = new ArrayList<String>();
						mediaURL.add(feed);
					}
					properties.put("socialMediaURL", mediaURL);
					

					newRev.setUserProperties(properties);
					return true;
				}
				
			});
			updated = true;
			
		} catch (CouchbaseLiteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("UPDATED IS " + updated);
		return updated;
	}
	
	public boolean deleteProfile(String id) {
		boolean deleted = false;
		
		Document doc = (Document) database.getDocument(id);
		try {
			deleted = doc.delete();
		} catch (CouchbaseLiteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return deleted;
	}
	
	public void updateQuery() {
		Query query = database.getView("profiles").createQuery();
		query.setLimit(50);
		LiveQuery liveQuery = query.toLiveQuery();
		System.out.println("something has changed 0 ");
		/*this.liveQuery = liveQuery;*/
		liveQuery.addChangeListener(new LiveQuery.ChangeListener() {
			
			@Override
			public void changed(LiveQuery.ChangeEvent event) {
				System.out.println("something has changed 1");
				// TODO Auto-generated method stub
				if (event.getSource().equals(liveQuery)) {
					System.out.println("live query" + (event.getRows()));
				}
			}
		});
	}
	
	
	public Manager getManager() {
		return manager;
	}


	public void setManager(Manager manager) {
		this.manager = manager;
	}


	public Database getDatabase() {
		return database;
	}


	public void setDatabase(Database database) {
		this.database = database;
	}
	
	
}

